Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\n\r\nbuildscript {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        \r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:7.2.2'\r\n        \r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        \r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 3b9fe203b4add1dfe69ee799fc562bd30168ec8b)
+++ b/build.gradle	(date 1667845829424)
@@ -7,7 +7,7 @@
         
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:7.2.2'
+        classpath 'com.android.tools.build:gradle:7.3.0'
         
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\n\r\nandroid {\r\n    compileSdkVersion 33\r\n    defaultConfig {\r\n        applicationId \"com.person.v_plaunov.mylistview\"\r\n        minSdkVersion 24\r\n        targetSdkVersion 33\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'\r\n    }\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\r\n    implementation 'androidx.appcompat:appcompat:1.5.1'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\r\n    implementation 'com.google.android.material:material:1.6.1'\r\n    testImplementation 'junit:junit:4.13'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\r\n}\r\n// Добавлены комментарии\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 3b9fe203b4add1dfe69ee799fc562bd30168ec8b)
+++ b/app/build.gradle	(date 1667845829433)
@@ -16,6 +16,7 @@
             proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
         }
     }
+    namespace 'com.person.v_plaunov.mylistview'
 }
 
 dependencies {
Index: app/src/main/java/com/person/v_plaunov/mylistview/Coin.java
===================================================================
diff --git a/app/src/main/java/com/person/v_plaunov/mylistview/Coin.java b/app/src/main/java/com/person/v_plaunov/mylistview/Coin.java
deleted file mode 100644
--- a/app/src/main/java/com/person/v_plaunov/mylistview/Coin.java	(revision 3b9fe203b4add1dfe69ee799fc562bd30168ec8b)
+++ /dev/null	(revision 3b9fe203b4add1dfe69ee799fc562bd30168ec8b)
@@ -1,231 +0,0 @@
-package com.person.v_plaunov.mylistview;
-
-import java.util.Date;
-
-public class Coin {
-    String coinId = null;
-    String coinNominal = null;
-    String coinState = null;
-    String coinImg = null;
-    String coinTheme = null;
-    String coinMint = null;
-    String coinYear = null;
-    String coinDiam = null;
-    String coinWeight = null;
-    String coinHeight = null;
-    String coinPrice = null;
-    String coinPriceForSale = null;
-    String coinPriceBuy = null;
-    Date coinDate = null;
-    String coinSeller = null;
-    String coinMetal = null;
-    String coinQuality = null;
-    Date coinCreated = null;
-    String coinStorage = null;
-    String coinEdge = null;
-    String coinLoO = null;
-    String coinLoR = null;
-    String coinDescription = null;
-
-    public Coin(String coinId, String coinNominal, String coinState, String coinYear, String coinTheme, String coinDescription) {
-        super();
-        this.coinId = coinId;
-        this.coinNominal = coinNominal;
-        this.coinState = coinState;
-        this.coinImg = coinImg;
-        this.coinTheme = coinTheme;
-        this.coinMint = coinMint;
-        this.coinYear = coinYear;
-        this.coinDiam = coinDiam;
-        this.coinWeight = coinWeight;
-        this.coinHeight = coinHeight;
-        this.coinPrice = coinPrice;
-        this.coinPriceForSale = coinPriceForSale;
-        this.coinPriceBuy = coinPriceBuy;
-        this.coinDate = coinDate;
-        this.coinSeller = coinSeller;
-        this.coinMetal = coinMetal;
-        this.coinQuality = coinQuality;
-        this.coinCreated = coinCreated;
-        this.coinStorage = coinStorage;
-        this.coinEdge = coinEdge;
-        this.coinLoO = coinLoO;
-        this.coinLoR = coinLoR;
-        this.coinDescription = coinDescription;
-    }
-    public String getCoinId() {
-        return coinId;
-    }
-
-    public void setCoinId(String coinId) {
-        this.coinId = coinId;
-    }
-
-    public String getCoinNominal() {
-        return coinNominal;
-    }
-
-    public void setCoinNominal(String coinNominal) {
-        this.coinNominal = coinNominal;
-    }
-
-    public String getCoinState() {
-        return coinState;
-    }
-
-    public void setCoinState(String coinState) {
-        this.coinState = coinState;
-    }
-
-    public String getCoinImg() { return coinImg; }
-
-    public void setCoinImg(String coinImg) { this.coinImg = coinImg; }
-
-    public String getCoinTheme() {
-        return coinTheme;
-    }
-
-    public void setCoinTheme(String coinTheme) {
-        this.coinTheme = coinTheme;
-    }
-
-    public String getCoinMint() {
-        return coinMint;
-    }
-
-    public void setCoinMint(String coinMint) {
-        this.coinMint = coinMint;
-    }
-
-    public String getCoinYear() {
-        return coinYear;
-    }
-
-    public void setCoinYear(String coinYear) {
-        this.coinYear = coinYear;
-    }
-
-    public String getCoinDiam() {
-        return coinDiam;
-    }
-
-    public void setCoinDiam(String coinDiam) { this.coinDiam = coinDiam; }
-
-    public String getCoinWeight() {
-        return coinWeight;
-    }
-
-    public void setCoinWeight(String coinWeight) {
-        this.coinWeight = coinWeight;
-    }
-
-    public String getCoinHeight() { return coinHeight; }
-
-    public void setCoinHeight(String coinHeight) { this.coinHeight = coinHeight; }
-
-    public String getCoinPrice() {
-        return coinPrice;
-    }
-
-    public void setCoinPrice(String coinPrice) {
-        this.coinPrice = coinPrice;
-    }
-
-    public String getCoinPriceForSale() {
-        return coinPriceForSale;
-    }
-
-    public void setCoinPriceForSale(String coinPriceForSale) { this.coinPriceForSale = coinPriceForSale; }
-
-    public String getCoinPriceBuy() {
-        return coinPriceBuy;
-    }
-
-    public void setCoinPriceBuy(String coinPriceBuy) {
-        this.coinPriceBuy = coinPriceBuy;
-    }
-
-    public Date getcoinDate() {
-        return coinDate;
-    }
-
-    public void setCoinDate(Date coinDate) {
-        this.coinDate = coinDate;
-    }
-
-    public String getCoinSeller() {
-        return coinSeller;
-    }
-
-    public void setCoinSeller(String coinSeller) {
-        this.coinSeller = coinSeller;
-    }
-
-    public String getCoinMetal() {
-        return coinMetal;
-    }
-
-    public void setCoinMetal(String coinMetal) {
-        this.coinMetal = coinMetal;
-    }
-
-    public String getCoinQuality() {
-        return coinQuality;
-    }
-
-    public void setCoinQuality(String coinQuality) {
-        this.coinQuality = coinQuality;
-    }
-
-    public Date getCoinCreated() {
-        return coinCreated;
-    }
-
-    public void setCoinCreated(Date coinCreated) {
-        this.coinCreated = coinCreated;
-    }
-
-    public String getCoinStorage() {
-        return coinStorage;
-    }
-
-    public void setCoinStorage(String coinStorage) {
-        this.coinStorage = coinStorage;
-    }
-
-    public String getCoinEdge() {
-        return coinEdge;
-    }
-
-    public void setCoinEdge(String coinEdge) {
-        this.coinEdge = coinEdge;
-    }
-
-    public String getCoinLoO() {
-        return coinLoO;
-    }
-
-    public void setCoinLoO(String coinLoO) {
-        this.coinLoO = coinLoO;
-    }
-
-    public String getCoinLoR() {
-        return coinLoR;
-    }
-
-    public void setCoinLoR(String coinLoR) {
-        this.coinLoR = coinLoR;
-    }
-
-    public String getCoinDescription() {
-        return coinDescription;
-    }
-
-    public void setCoinDescription(String coinDescription) { this.coinDescription = coinDescription; }
-
-    @Override
-    public String toString() {
-        return  coinNominal + " " + coinState + " "
-                + coinYear + " " + coinTheme + " " + coinDescription + " " + coinImg + " " + coinDate;
-    }
-}
Index: app/src/main/java/com/person/v_plaunov/mylistview/MainActivity.java
===================================================================
diff --git a/app/src/main/java/com/person/v_plaunov/mylistview/MainActivity.java b/app/src/main/java/com/person/v_plaunov/mylistview/MainActivity.java
deleted file mode 100644
--- a/app/src/main/java/com/person/v_plaunov/mylistview/MainActivity.java	(revision 3b9fe203b4add1dfe69ee799fc562bd30168ec8b)
+++ /dev/null	(revision 3b9fe203b4add1dfe69ee799fc562bd30168ec8b)
@@ -1,470 +0,0 @@
-package com.person.v_plaunov.mylistview;
-
-import android.Manifest;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-
-import androidx.core.app.ActivityCompat;
-import androidx.core.content.ContextCompat;
-import androidx.appcompat.app.AppCompatActivity;
-import android.os.Bundle;
-import android.text.Editable;
-import android.text.TextUtils;
-import android.text.TextWatcher;
-import android.util.Log;
-import android.view.View;
-import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
-import android.widget.EditText;
-import android.widget.ListView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.FileReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.nio.channels.FileChannel;
-import java.util.ArrayList;
-import java.util.Collections;
-
-import org.xml.sax.InputSource;
-import org.xmlpull.v1.XmlPullParser;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-
-public class MainActivity extends AppCompatActivity {
-
-    //private static String DB_PATH = "/data/data/com.person.v_plaunov.mylistview/databases/";
-    //private static String DB_PATH = "/storage/self/primary/My Documents/";
-
-    private static final String DB_NAME = "myDB";
-    private static final int REQUEST_CODE_PERMISSION_READ_CONTACTS = 1;
-    private static final int REQUEST_CODE_WRITE_EXTERNAL_STORAGE_PERMISSION = 1;
-    private SQLiteDatabase myDataBase;
-    public Coin[] myArray;
-    public ArrayAdapter<Coin> adapter;
-    final String LOG_TAG = "myLogs";
-
-    final String FILENAME = "file";
-
-    //Поиск EditText
-    EditText inputSearch;
-    ArrayList<Coin> myArrayList = new ArrayList<Coin>();
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_main);
-        final ListView lvMain = (ListView)findViewById(R.id.lv);
-//        final TextView txt = (TextView)findViewById(R.id.txt);
-        final TextView txtNum = (TextView)findViewById(R.id.textNum);
-        inputSearch = (EditText) findViewById(R.id.inputSearch);
-        final Context mContext;
-        mContext = getApplicationContext();
-
-        initializeData();
-//      Комментарий для GitHub
-        //ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.day_of_weeks, android.R.layout.simple_list_item_1);
-//        ArrayAdapter<String> adapter = new ArrayAdapter(this, android.R.layout.simple_list_item_1, myArray);
-//        myArrayList = Arrays.asList(myArray);
-        Collections.addAll(myArrayList, myArray);
-        Integer Num = myArrayList.size();
-        CharSequence sNum = Num.toString(); //.subSequence(0,4);
-
-        txtNum.setText(sNum);
-
-        //adapter = new CustomAdapter(this, R.layout.coin_item, R.id.coin, myArrayList);
-        adapter = new CustomAdapter(this, android.R.layout.simple_list_item_1, myArrayList);
-//        adapter = new CustomAdapter(this, R.layout.coin_item, myArrayList);
-        lvMain.setAdapter(adapter);
-        //enables filtering for the contents of the given ListView
-        lvMain.setTextFilterEnabled(true);
-        lvMain.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> parent, View view, int position, long id)
-            {
-//                AlertDialog.Builder adb = new AlertDialog.Builder(
-//                        MainActivity.this);
-//                adb.setTitle("Лист клик");
-//                adb.setMessage("Выбран элемент = " + lvMain.getItemAtPosition(position));
-//                adb.setPositiveButton("Ok", null);
-//                adb.show();
-//                txtNum.setText(myArrayList.size());
-
-                Intent intent = new Intent(mContext, CoinViewActivity.class);
-                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-//                intent.putExtra("coin_id", position + 1);
-                Object coinObj = new Object();
-                coinObj = lvMain.getItemAtPosition(position);
-                Coin coin = (Coin)coinObj;
-                String objName = coin.getClass().getName();
-                int idC = Integer.parseInt(coin.coinId);
-                //Coin coin = new Coin();
-                intent.putExtra("coin_id", idC);
-//                intent.putExtra("coin_nominal", coins.get(i).nominal);
-//                intent.putExtra("coin_state", coins.get(i).state);
-//                intent.putExtra("coin_img", coins.get(i).img);
-                mContext.startActivity(intent);
-            }
-        });
-        inputSearch.addTextChangedListener(new TextWatcher() {
-
-            @Override
-            public void onTextChanged(CharSequence cs, int arg1, int arg2, int arg3) {
-                //Когда пользователь вводит какой-нибудь текст:
-                if (adapter != null) {
-                    adapter.getFilter().filter(cs.toString());
-//                    adapter.notifyDataSetChanged();
-                } else {
-                    Log.d("filter", "no filter available");
-                }
-
-                //MainActivity.this.adapter.getFilter().filter(cs);
-            }
-
-            @Override
-            public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,
-                                          int arg3) {
-            }
-
-            @Override
-            public void afterTextChanged(Editable arg0) {
-            }
-        });
-    }
-    public void onClick(View v){
-        switch (v.getId()) {
-            case R.id.button_LoadFile:
-                // Очистим базу монет
-                //Наш ключевой хелпер
-                DBOpenHelper dbOpenHelper = new DBOpenHelper(this, DB_NAME);
-                myDataBase = dbOpenHelper.openDataBase();
-                myDataBase.delete("coins",null,null);
-
-                // Получаем разрешение на чтение файла
-                // Check whether this app has write external storage permission or not.
-                int writeExternalStoragePermission = ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE);
-                // If do not grant write external storage permission.
-                if(writeExternalStoragePermission!= PackageManager.PERMISSION_GRANTED)
-                {
-                    // Request user to grant write external storage permission.
-                    ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_CODE_WRITE_EXTERNAL_STORAGE_PERMISSION);
-                }
-                XmlPullParser xpp = null;
-                //InputStream document = readFile();
-                //xpp.setInput(document, null);
-                // Получаем путь к файлу
-                TextView tv = (TextView) findViewById(R.id.textFilePath);
-                String strDirPath = tv.getText().toString();
-                String strFilePath = strDirPath + FILENAME;
-
-                //XmlPullParser xpp = getResources().getXml(R.xml.products);
-                CoinFileParser parser = new CoinFileParser();
-                if(parser.parse(strFilePath))
-                {
-                    for(Coin coin: parser.getCoins()){
-                        // Загрузить монеты в базу данных sqlite
-                        // База уже открыта!
-                        // переменные для query
-                        String [] columns = {"_id", "Nominal", "State", "Img", "Year", "Theme", "Description"};
-                        String insquery = "";
-                        StringBuilder sb = new StringBuilder();
-                        // Объявляем переменные для значений для вставки в БД
-                        String valCoinId = null;
-                        String valCoinNominal = null;
-                        String valCoinState = null;
-                        String valCoinImg = null;
-                        String valCoinTheme = null;
-                        String valCoinMint = null;
-                        String valCoinYear = null;
-                        String valCoinDiam = null;
-                        String valCoinWeight = null;
-                        String valCoinHeight = null;
-                        String valCoinPrice = null;
-                        String valCoinPriceForSale = null;
-                        String valCoinPriceBuy = null;
-                        String valCoinDate = null;
-                        String valCoinSeller = null;
-                        String valCoinMetal = null;
-                        String valCoinQuality = null;
-                        String valCoinCreated = null;
-                        String valCoinStorage = null;
-                        String valCoinEdge = null;
-                        String valCoinLoO = null;
-                        String valCoinLoR = null;
-                        String valCoinDescription = null;
-
-                        sb.append("INSERT INTO " + "COINS" + " Values (");
-                        if (!TextUtils.isEmpty(coin.coinId)) {
-                            valCoinId = "'" + coin.coinId + "'";
-                        }
-                        sb.append(valCoinId);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinNominal)) {
-                            valCoinNominal = "'" + coin.coinNominal + "'";
-                        }
-                        sb.append(valCoinNominal);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinState)) {
-                            valCoinState = "'" + coin.coinState + "'";
-                        }
-                        sb.append(valCoinState);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinImg)) {
-                            valCoinImg = "'" + coin.coinImg + "'";
-                            // Скопировать файл с изображением из выгруженного каталога в каталог databases
-                            //Составим полный путь к базам для вашего приложения
-
-                            String packageName = this.getPackageName();
-
-                            String DB_PATH = String.format(this.getString(R.string.str_db_path), packageName);
-                            String destCoinImagePath = DB_PATH + coin.coinImg.replace("\\", "//");
-                            File destFile = new File(destCoinImagePath);
-                            String coinImagePath = strDirPath + coin.coinImg.replace("\\", "//");
-                            File sourceFile = new File(coinImagePath);
-                            try {
-                                copyFile(sourceFile, destFile);
-                            } catch (IOException e) {
-                                e.printStackTrace();
-                            }
-                        }
-                        sb.append(valCoinImg);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinTheme)) {
-                            valCoinTheme = "'" + coin.coinTheme + "'";
-                        }
-                        sb.append(valCoinTheme);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinMint)) {
-                            valCoinMint = "'" + coin.coinMint + "'";
-                        }
-                        sb.append(valCoinMint);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinYear)) {
-                            valCoinYear = "'" + coin.coinYear + "'";
-                        }
-                        sb.append(valCoinYear);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinDiam)) {
-                            valCoinDiam = "'" + coin.coinDiam + "'";
-                        }
-                        sb.append(valCoinDiam);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinWeight)) {
-                            valCoinWeight = "'" + coin.coinWeight + "'";
-                        }
-                        sb.append(valCoinWeight);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinHeight)) {
-                            valCoinHeight = "'" + coin.coinHeight + "'";
-                        }
-                        sb.append(valCoinHeight);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinPrice)) {
-                            valCoinPrice = "'" + coin.coinPrice + "'";
-                        }
-                        sb.append(valCoinPrice);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinPriceForSale)) {
-                            valCoinPriceForSale = "'" + coin.coinPriceForSale + "'";
-                        }
-                        sb.append(valCoinPriceForSale);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinPriceBuy)) {
-                            valCoinPriceBuy = "'" + coin.coinPriceBuy + "'";
-                        }
-                        sb.append(valCoinPriceBuy);
-                        sb.append(",");
-
-                        if (!(coin.coinDate == null)) {
-                            valCoinDate = "'" + coin.coinDate + "'";
-                        }
-                        sb.append(valCoinDate);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinSeller)) {
-                            valCoinSeller = "'" + coin.coinSeller + "'";
-                        }
-                        sb.append(valCoinSeller);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinMetal)) {
-                            valCoinMetal = "'" + coin.coinMetal + "'";
-                        }
-                        sb.append(valCoinMetal);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinQuality)) {
-                            valCoinQuality = "'" + coin.coinQuality + "'";
-                        }
-                        sb.append(valCoinQuality);
-                        sb.append(",");
-
-                        if (!(coin.coinCreated == null)) {
-                            valCoinCreated = "'" + coin.coinCreated + "'";
-                        }
-                        sb.append(valCoinCreated);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinStorage)) {
-                            valCoinStorage = "'" + coin.coinStorage + "'";
-                        }
-                        sb.append(valCoinStorage);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinEdge)) {
-                            valCoinEdge = "'" + coin.coinEdge + "'";
-                        }
-                        sb.append(valCoinEdge);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinLoO)) {
-                            valCoinLoO = "'" + coin.coinLoO + "'";
-                        }
-                        sb.append(valCoinLoO);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinLoR)) {
-                            valCoinLoR = "'" + coin.coinLoR + "'";
-                        }
-                        sb.append(valCoinLoR);
-                        sb.append(",");
-
-                        if (!TextUtils.isEmpty(coin.coinDescription)) {
-                            valCoinDescription = "'" + coin.coinDescription + "'";
-                        }
-                        sb.append(valCoinDescription);
-                        sb.append(");");
-
-                        insquery = sb.toString();
-                        try {
-                            myDataBase.execSQL(insquery);
-                        }
-                        catch (Exception e) {
-                            Toast toast = Toast.makeText(getApplicationContext(),
-                                    "Ошибка!", Toast.LENGTH_SHORT);
-                        }
-                        //Log.d("XML", coin.toString());
-                    }
-                }
-                Toast toast = Toast.makeText(getApplicationContext(),
-                        "База монет загружена!", Toast.LENGTH_SHORT);
-                toast.show();
-                break;
-        }
-    }
-    public InputStream readFile() {
-        // открываем поток для чтения
-//            BufferedReader br = new BufferedReader(new InputStreamReader(
-//                    openFileInput(strFilePath)));
-        int permissionStatus = ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE);
-        if (permissionStatus == PackageManager.PERMISSION_GRANTED) {
-            // Получаем путь к файлу
-            TextView tv = (TextView) findViewById(R.id.textFilePath);
-            String strFilePath = tv.getText().toString();
-            strFilePath = strFilePath + FILENAME;
-            InputStream document = null;
-
-            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-            factory.setNamespaceAware(true);
-            try {
-                DocumentBuilder db = factory.newDocumentBuilder();
-                InputSource inputSource = new InputSource(new FileReader(strFilePath));
-                document = new FileInputStream(strFilePath); // db.parse(inputSource);
-
-
-            } catch (ParserConfigurationException e) {
-                Log.e("Error: ", e.getMessage());
-                return null;
-            } /*catch (SAXException e) {
-                Log.e("Error: ", e.getMessage());
-                return null;
-            }*/ catch (IOException e) {
-                Log.e("Error: ", e.getMessage());
-                return null;
-            }
-            return document;
-
-        } else {
-            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
-                    REQUEST_CODE_PERMISSION_READ_CONTACTS);
-        }
-        return null;
-    }
-
-    private void initializeData(){
-        // переменные для query
-        String [] columns = {"_id", "Nominal", "State", "Img", "Year", "Theme", "Description"};
-
-        //Наш ключевой хелпер
-        DBOpenHelper dbOpenHelper = new DBOpenHelper(this, DB_NAME);
-        myDataBase = dbOpenHelper.openDataBase();
-        //Все, база открыта!
-
-//        Cursor cursor = myDataBase.query("coins", columns, selection, selectionArgs, null, null, null);
-        Cursor cursor = myDataBase.query("coins", columns, null, null, null, null, null);
-        int num = cursor.getCount();
-        myArray = new Coin[num];
-        int i = 0;
-
-        while (cursor.moveToNext()){
-            int _id = cursor.getInt(0);
-            String nominal = cursor.getString(1);
-            String state = cursor.getString(2);
-            String img = cursor.getString(3);
-            String year = cursor.getString(4);
-            String theme = cursor.getString(5);
-            String description = cursor.getString(6);
-
-            //myArray[i] = nominal + " " + state + " " + year;
-            Coin coin = new Coin(String.valueOf(_id), nominal, state, year, theme, description);
-            myArray[i] = coin;
-            i = ++i;
-        }
-    }
-
-    public void copyFile(File sourceFile, File destFile) throws IOException {
-        if(!destFile.exists()) {
-            destFile.createNewFile();
-        }
-
-        FileChannel source = null;
-        FileChannel destination = null;
-
-        try {
-            source = new FileInputStream(sourceFile).getChannel();
-            destination = new FileOutputStream(destFile).getChannel();
-            destination.transferFrom(source, 0, source.size());
-        }
-        finally {
-            if(source != null) {
-                source.close();
-            }
-            if(destination != null) {
-                destination.close();
-            }
-        }
-    }
-
-
-}
\ No newline at end of file
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Tue Oct 13 21:45:35 MSK 2020\r\ndistributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-7.3.3-bin.zip\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
--- a/gradle/wrapper/gradle-wrapper.properties	(revision 3b9fe203b4add1dfe69ee799fc562bd30168ec8b)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1667845829463)
@@ -3,4 +3,4 @@
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.3.3-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.4-bin.zip
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CMakeSettings\">\r\n    <configurations>\r\n      <configuration PROFILE_NAME=\"Debug\" CONFIG_NAME=\"Debug\" />\r\n    </configurations>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 3b9fe203b4add1dfe69ee799fc562bd30168ec8b)
+++ b/.idea/misc.xml	(date 1667845829472)
@@ -5,6 +5,13 @@
       <configuration PROFILE_NAME="Debug" CONFIG_NAME="Debug" />
     </configurations>
   </component>
+  <component name="DesignSurface">
+    <option name="filePathToZoomLevelMap">
+      <map>
+        <entry key="..\:/Work/AndroidGitRepo/MyListView/app/src/main/res/layout-v26/activity_main.xml" value="0.1" />
+      </map>
+    </option>
+  </component>
   <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.person.v_plaunov.mylistview\">\r\n\r\n    <uses-permission android:name=\"android.permission.READ_INTERNAL_STORAGE\"/>\r\n    <uses-permission android:name=\"android.permission.WRITE_INTERNAL_STORAGE\"/>\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\">\r\n        <activity android:name=\".CoinViewActivity\"></activity>\r\n        <activity android:name=\".MainActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision 3b9fe203b4add1dfe69ee799fc562bd30168ec8b)
+++ b/app/src/main/AndroidManifest.xml	(date 1667845829478)
@@ -1,6 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.person.v_plaunov.mylistview">
+<manifest xmlns:android="http://schemas.android.com/apk/res/android">
 
     <uses-permission android:name="android.permission.READ_INTERNAL_STORAGE"/>
     <uses-permission android:name="android.permission.WRITE_INTERNAL_STORAGE"/>
Index: .idea/codeStyles/Project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"ProjectCodeStyleConfiguration\">\r\n  <code_scheme name=\"Project\" version=\"173\">\r\n    <JetCodeStyleSettings>\r\n      <option name=\"PACKAGES_TO_USE_STAR_IMPORTS\">\r\n        <value>\r\n          <package name=\"java.util\" alias=\"false\" withSubpackages=\"false\" />\r\n          <package name=\"kotlinx.android.synthetic\" alias=\"false\" withSubpackages=\"true\" />\r\n          <package name=\"io.ktor\" alias=\"false\" withSubpackages=\"true\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"PACKAGES_IMPORT_LAYOUT\">\r\n        <value>\r\n          <package name=\"\" alias=\"false\" withSubpackages=\"true\" />\r\n          <package name=\"java\" alias=\"false\" withSubpackages=\"true\" />\r\n          <package name=\"javax\" alias=\"false\" withSubpackages=\"true\" />\r\n          <package name=\"kotlin\" alias=\"false\" withSubpackages=\"true\" />\r\n          <package name=\"\" alias=\"true\" withSubpackages=\"true\" />\r\n        </value>\r\n      </option>\r\n    </JetCodeStyleSettings>\r\n    <codeStyleSettings language=\"XML\">\r\n      <indentOptions>\r\n        <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\r\n      </indentOptions>\r\n      <arrangement>\r\n        <rules>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>xmlns:android</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>xmlns:.*</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n              <order>BY_NAME</order>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*:id</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*:name</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>name</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>style</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>^$</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n              <order>BY_NAME</order>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n              <order>ANDROID_ATTRIBUTE_ORDER</order>\r\n            </rule>\r\n          </section>\r\n          <section>\r\n            <rule>\r\n              <match>\r\n                <AND>\r\n                  <NAME>.*</NAME>\r\n                  <XML_ATTRIBUTE />\r\n                  <XML_NAMESPACE>.*</XML_NAMESPACE>\r\n                </AND>\r\n              </match>\r\n              <order>BY_NAME</order>\r\n            </rule>\r\n          </section>\r\n        </rules>\r\n      </arrangement>\r\n    </codeStyleSettings>\r\n  </code_scheme>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/Project.xml b/.idea/codeStyles/Project.xml
--- a/.idea/codeStyles/Project.xml	(revision 3b9fe203b4add1dfe69ee799fc562bd30168ec8b)
+++ b/.idea/codeStyles/Project.xml	(date 1667845829536)
@@ -1,24 +1,10 @@
 <component name="ProjectCodeStyleConfiguration">
   <code_scheme name="Project" version="173">
     <JetCodeStyleSettings>
-      <option name="PACKAGES_TO_USE_STAR_IMPORTS">
-        <value>
-          <package name="java.util" alias="false" withSubpackages="false" />
-          <package name="kotlinx.android.synthetic" alias="false" withSubpackages="true" />
-          <package name="io.ktor" alias="false" withSubpackages="true" />
-        </value>
-      </option>
-      <option name="PACKAGES_IMPORT_LAYOUT">
-        <value>
-          <package name="" alias="false" withSubpackages="true" />
-          <package name="java" alias="false" withSubpackages="true" />
-          <package name="javax" alias="false" withSubpackages="true" />
-          <package name="kotlin" alias="false" withSubpackages="true" />
-          <package name="" alias="true" withSubpackages="true" />
-        </value>
-      </option>
+      <option name="CODE_STYLE_DEFAULTS" value="KOTLIN_OFFICIAL" />
     </JetCodeStyleSettings>
     <codeStyleSettings language="XML">
+      <option name="FORCE_REARRANGE_MODE" value="1" />
       <indentOptions>
         <option name="CONTINUATION_INDENT_SIZE" value="4" />
       </indentOptions>
@@ -129,6 +115,9 @@
           </section>
         </rules>
       </arrangement>
+    </codeStyleSettings>
+    <codeStyleSettings language="kotlin">
+      <option name="CODE_STYLE_DEFAULTS" value="KOTLIN_OFFICIAL" />
     </codeStyleSettings>
   </code_scheme>
 </component>
\ No newline at end of file
Index: app/src/main/java/com/person/v_plaunov/mylistview/Coin.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/person/v_plaunov/mylistview/Coin.kt b/app/src/main/java/com/person/v_plaunov/mylistview/Coin.kt
new file mode 100644
--- /dev/null	(date 1667845829543)
+++ b/app/src/main/java/com/person/v_plaunov/mylistview/Coin.kt	(date 1667845829543)
@@ -0,0 +1,63 @@
+package com.person.v_plaunov.mylistview
+
+import java.util.*
+
+class Coin(coinId: String?, coinNominal: String?, coinState: String?, coinYear: String?, coinTheme: String?, coinDescription: String?) {
+    var coinId: String? = null
+    var coinNominal: String? = null
+    var coinState: String? = null
+    var coinImg: String? = null
+    var coinTheme: String? = null
+    var coinMint: String? = null
+    var coinYear: String? = null
+    var coinDiam: String? = null
+    var coinWeight: String? = null
+    var coinHeight: String? = null
+    var coinPrice: String? = null
+    var coinPriceForSale: String? = null
+    var coinPriceBuy: String? = null
+    var coinDate: Date? = null
+    var coinSeller: String? = null
+    var coinMetal: String? = null
+    var coinQuality: String? = null
+    var coinCreated: Date? = null
+    var coinStorage: String? = null
+    var coinEdge: String? = null
+    var coinLoO: String? = null
+    var coinLoR: String? = null
+    var coinDescription: String? = null
+    fun getcoinDate(): Date? {
+        return coinDate
+    }
+
+    override fun toString(): String {
+        return (coinNominal + " " + coinState + " "
+                + coinYear + " " + coinTheme + " " + coinDescription + " " + coinImg + " " + coinDate)
+    }
+
+    init {
+        this.coinId = coinId
+        this.coinNominal = coinNominal
+        this.coinState = coinState
+        coinImg = coinImg
+        this.coinTheme = coinTheme
+        coinMint = coinMint
+        this.coinYear = coinYear
+        coinDiam = coinDiam
+        coinWeight = coinWeight
+        coinHeight = coinHeight
+        coinPrice = coinPrice
+        coinPriceForSale = coinPriceForSale
+        coinPriceBuy = coinPriceBuy
+        coinDate = coinDate
+        coinSeller = coinSeller
+        coinMetal = coinMetal
+        coinQuality = coinQuality
+        coinCreated = coinCreated
+        coinStorage = coinStorage
+        coinEdge = coinEdge
+        coinLoO = coinLoO
+        coinLoR = coinLoR
+        this.coinDescription = coinDescription
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/person/v_plaunov/mylistview/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/person/v_plaunov/mylistview/MainActivity.kt b/app/src/main/java/com/person/v_plaunov/mylistview/MainActivity.kt
new file mode 100644
--- /dev/null	(date 1667845829455)
+++ b/app/src/main/java/com/person/v_plaunov/mylistview/MainActivity.kt	(date 1667845829455)
@@ -0,0 +1,408 @@
+package com.person.v_plaunov.mylistview
+
+import android.Manifest
+import android.content.Context
+import androidx.appcompat.app.AppCompatActivity
+import android.database.sqlite.SQLiteDatabase
+import com.person.v_plaunov.mylistview.Coin
+import android.os.Bundle
+import com.person.v_plaunov.mylistview.R
+import com.person.v_plaunov.mylistview.CustomAdapter
+import android.widget.AdapterView.OnItemClickListener
+import android.content.Intent
+import com.person.v_plaunov.mylistview.CoinViewActivity
+import android.text.TextWatcher
+import android.text.Editable
+import com.person.v_plaunov.mylistview.DBOpenHelper
+import com.person.v_plaunov.mylistview.MainActivity
+import androidx.core.content.ContextCompat
+import android.content.pm.PackageManager
+import androidx.core.app.ActivityCompat
+import org.xmlpull.v1.XmlPullParser
+import com.person.v_plaunov.mylistview.CoinFileParser
+import android.text.TextUtils
+import android.util.Log
+import android.view.View
+import android.widget.*
+import org.xml.sax.InputSource
+import java.io.*
+import java.lang.Exception
+import java.lang.StringBuilder
+import java.nio.channels.FileChannel
+import java.util.*
+import javax.xml.parsers.DocumentBuilderFactory
+import javax.xml.parsers.ParserConfigurationException
+
+class MainActivity : AppCompatActivity() {
+    private var myDataBase: SQLiteDatabase? = null
+    lateinit var myArray: Array<Coin>
+    var adapter: ArrayAdapter<Coin>? = null
+    val LOG_TAG = "myLogs"
+    val FILENAME = "file"
+
+    //Поиск EditText
+    var inputSearch: EditText? = null
+    var myArrayList = ArrayList<Coin>()
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_main)
+        val lvMain = findViewById<View>(R.id.lv) as ListView
+        //        final TextView txt = (TextView)findViewById(R.id.txt);
+        val txtNum = findViewById<View>(R.id.textNum) as TextView
+        inputSearch = findViewById<View>(R.id.inputSearch) as EditText
+        val mContext: Context
+        mContext = applicationContext
+        initializeData()
+        //      Комментарий для GitHub
+        //ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.day_of_weeks, android.R.layout.simple_list_item_1);
+//        ArrayAdapter<String> adapter = new ArrayAdapter(this, android.R.layout.simple_list_item_1, myArray);
+//        myArrayList = Arrays.asList(myArray);
+        Collections.addAll(myArrayList, *myArray)
+        val Num = myArrayList.size
+        val sNum: CharSequence = Num.toString() //.subSequence(0,4);
+        txtNum.text = sNum
+
+        //adapter = new CustomAdapter(this, R.layout.coin_item, R.id.coin, myArrayList);
+        adapter = CustomAdapter(this, android.R.layout.simple_list_item_1, myArrayList)
+        //        adapter = new CustomAdapter(this, R.layout.coin_item, myArrayList);
+        lvMain.adapter = adapter
+        //enables filtering for the contents of the given ListView
+        lvMain.isTextFilterEnabled = true
+        lvMain.onItemClickListener = OnItemClickListener { parent, view, position, id -> //                AlertDialog.Builder adb = new AlertDialog.Builder(
+//                        MainActivity.this);
+//                adb.setTitle("Лист клик");
+//                adb.setMessage("Выбран элемент = " + lvMain.getItemAtPosition(position));
+//                adb.setPositiveButton("Ok", null);
+//                adb.show();
+//                txtNum.setText(myArrayList.size());
+            val intent = Intent(mContext, CoinViewActivity::class.java)
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+            //                intent.putExtra("coin_id", position + 1);
+            var coinObj = Any()
+            coinObj = lvMain.getItemAtPosition(position)
+            val coin = coinObj as Coin
+            val objName = coin.javaClass.name
+            val idC = coin.coinId?.toInt()
+            //Coin coin = new Coin();
+            intent.putExtra("coin_id", idC)
+            //                intent.putExtra("coin_nominal", coins.get(i).nominal);
+//                intent.putExtra("coin_state", coins.get(i).state);
+//                intent.putExtra("coin_img", coins.get(i).img);
+            mContext.startActivity(intent)
+        }
+        inputSearch!!.addTextChangedListener(object : TextWatcher {
+            override fun onTextChanged(cs: CharSequence, arg1: Int, arg2: Int, arg3: Int) {
+                //Когда пользователь вводит какой-нибудь текст:
+                if (adapter != null) {
+                    (adapter as CustomAdapter).getFilter().filter(cs.toString())
+                    //                    adapter.notifyDataSetChanged();
+                } else {
+                    Log.d("filter", "no filter available")
+                }
+
+                //MainActivity.this.adapter.getFilter().filter(cs);
+            }
+
+            override fun beforeTextChanged(arg0: CharSequence, arg1: Int, arg2: Int,
+                                           arg3: Int) {
+            }
+
+            override fun afterTextChanged(arg0: Editable) {}
+        })
+    }
+
+    fun onClick(v: View) {
+        when (v.id) {
+            R.id.button_LoadFile -> {
+                // Очистим базу монет
+                //Наш ключевой хелпер
+                val dbOpenHelper = DBOpenHelper(this, DB_NAME)
+                myDataBase = dbOpenHelper.openDataBase()
+                myDataBase?.delete("coins", null, null)
+
+                // Получаем разрешение на чтение файла
+                // Check whether this app has write external storage permission or not.
+                val writeExternalStoragePermission = ContextCompat.checkSelfPermission(this@MainActivity, Manifest.permission.WRITE_EXTERNAL_STORAGE)
+                // If do not grant write external storage permission.
+                if (writeExternalStoragePermission != PackageManager.PERMISSION_GRANTED) {
+                    // Request user to grant write external storage permission.
+                    ActivityCompat.requestPermissions(this@MainActivity, arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE), REQUEST_CODE_WRITE_EXTERNAL_STORAGE_PERMISSION)
+                }
+                val xpp: XmlPullParser? = null
+                //InputStream document = readFile();
+                //xpp.setInput(document, null);
+                // Получаем путь к файлу
+                val tv = findViewById<View>(R.id.textFilePath) as TextView
+                val strDirPath = tv.text.toString()
+                val strFilePath = strDirPath + FILENAME
+
+                //XmlPullParser xpp = getResources().getXml(R.xml.products);
+                val parser = CoinFileParser()
+                if (parser.parse(strFilePath)) {
+                    for (coin in parser.coins) {
+                        // Загрузить монеты в базу данных sqlite
+                        // База уже открыта!
+                        // переменные для query
+                        val columns = arrayOf("_id", "Nominal", "State", "Img", "Year", "Theme", "Description")
+                        var insquery = ""
+                        val sb = StringBuilder()
+                        // Объявляем переменные для значений для вставки в БД
+                        var valCoinId: String? = null
+                        var valCoinNominal: String? = null
+                        var valCoinState: String? = null
+                        var valCoinImg: String? = null
+                        var valCoinTheme: String? = null
+                        var valCoinMint: String? = null
+                        var valCoinYear: String? = null
+                        var valCoinDiam: String? = null
+                        var valCoinWeight: String? = null
+                        var valCoinHeight: String? = null
+                        var valCoinPrice: String? = null
+                        var valCoinPriceForSale: String? = null
+                        var valCoinPriceBuy: String? = null
+                        var valCoinDate: String? = null
+                        var valCoinSeller: String? = null
+                        var valCoinMetal: String? = null
+                        var valCoinQuality: String? = null
+                        var valCoinCreated: String? = null
+                        var valCoinStorage: String? = null
+                        var valCoinEdge: String? = null
+                        var valCoinLoO: String? = null
+                        var valCoinLoR: String? = null
+                        var valCoinDescription: String? = null
+                        sb.append("INSERT INTO " + "COINS" + " Values (")
+                        if (!TextUtils.isEmpty(coin.coinId)) {
+                            valCoinId = "'" + coin.coinId + "'"
+                        }
+                        sb.append(valCoinId)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinNominal)) {
+                            valCoinNominal = "'" + coin.coinNominal + "'"
+                        }
+                        sb.append(valCoinNominal)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinState)) {
+                            valCoinState = "'" + coin.coinState + "'"
+                        }
+                        sb.append(valCoinState)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinImg)) {
+                            valCoinImg = "'" + coin.coinImg + "'"
+                            // Скопировать файл с изображением из выгруженного каталога в каталог databases
+                            //Составим полный путь к базам для вашего приложения
+                            val packageName = this.packageName
+                            val DB_PATH = String.format(this.getString(R.string.str_db_path), packageName)
+                            val destCoinImagePath = DB_PATH + (coin.coinImg?.replace("\\", "//")  )
+                            val destFile = File(destCoinImagePath)
+                            val coinImagePath = strDirPath + (coin.coinImg?.replace("\\", "//")  )
+                            val sourceFile = File(coinImagePath)
+                            try {
+                                copyFile(sourceFile, destFile)
+                            } catch (e: IOException) {
+                                e.printStackTrace()
+                            }
+                        }
+                        sb.append(valCoinImg)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinTheme)) {
+                            valCoinTheme = "'" + coin.coinTheme + "'"
+                        }
+                        sb.append(valCoinTheme)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinMint)) {
+                            valCoinMint = "'" + coin.coinMint + "'"
+                        }
+                        sb.append(valCoinMint)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinYear)) {
+                            valCoinYear = "'" + coin.coinYear + "'"
+                        }
+                        sb.append(valCoinYear)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinDiam)) {
+                            valCoinDiam = "'" + coin.coinDiam + "'"
+                        }
+                        sb.append(valCoinDiam)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinWeight)) {
+                            valCoinWeight = "'" + coin.coinWeight + "'"
+                        }
+                        sb.append(valCoinWeight)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinHeight)) {
+                            valCoinHeight = "'" + coin.coinHeight + "'"
+                        }
+                        sb.append(valCoinHeight)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinPrice)) {
+                            valCoinPrice = "'" + coin.coinPrice + "'"
+                        }
+                        sb.append(valCoinPrice)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinPriceForSale)) {
+                            valCoinPriceForSale = "'" + coin.coinPriceForSale + "'"
+                        }
+                        sb.append(valCoinPriceForSale)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinPriceBuy)) {
+                            valCoinPriceBuy = "'" + coin.coinPriceBuy + "'"
+                        }
+                        sb.append(valCoinPriceBuy)
+                        sb.append(",")
+                        if (coin.coinDate != null) {
+                            valCoinDate = "'" + coin.coinDate + "'"
+                        }
+                        sb.append(valCoinDate)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinSeller)) {
+                            valCoinSeller = "'" + coin.coinSeller + "'"
+                        }
+                        sb.append(valCoinSeller)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinMetal)) {
+                            valCoinMetal = "'" + coin.coinMetal + "'"
+                        }
+                        sb.append(valCoinMetal)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinQuality)) {
+                            valCoinQuality = "'" + coin.coinQuality + "'"
+                        }
+                        sb.append(valCoinQuality)
+                        sb.append(",")
+                        if (coin.coinCreated != null) {
+                            valCoinCreated = "'" + coin.coinCreated + "'"
+                        }
+                        sb.append(valCoinCreated)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinStorage)) {
+                            valCoinStorage = "'" + coin.coinStorage + "'"
+                        }
+                        sb.append(valCoinStorage)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinEdge)) {
+                            valCoinEdge = "'" + coin.coinEdge + "'"
+                        }
+                        sb.append(valCoinEdge)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinLoO)) {
+                            valCoinLoO = "'" + coin.coinLoO + "'"
+                        }
+                        sb.append(valCoinLoO)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinLoR)) {
+                            valCoinLoR = "'" + coin.coinLoR + "'"
+                        }
+                        sb.append(valCoinLoR)
+                        sb.append(",")
+                        if (!TextUtils.isEmpty(coin.coinDescription)) {
+                            valCoinDescription = "'" + coin.coinDescription + "'"
+                        }
+                        sb.append(valCoinDescription)
+                        sb.append(");")
+                        insquery = sb.toString()
+                        try {
+                            myDataBase!!.execSQL(insquery)
+                        } catch (e: Exception) {
+                            val toast = Toast.makeText(applicationContext,
+                                    "Ошибка!", Toast.LENGTH_SHORT)
+                        }
+                        //Log.d("XML", coin.toString());
+                    }
+                }
+                val toast = Toast.makeText(applicationContext,
+                        "База монет загружена!", Toast.LENGTH_SHORT)
+                toast.show()
+            }
+        }
+    }
+
+    fun readFile(): InputStream? {
+        // открываем поток для чтения
+//            BufferedReader br = new BufferedReader(new InputStreamReader(
+//                    openFileInput(strFilePath)));
+        val permissionStatus = ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)
+        if (permissionStatus == PackageManager.PERMISSION_GRANTED) {
+            // Получаем путь к файлу
+            val tv = findViewById<View>(R.id.textFilePath) as TextView
+            var strFilePath = tv.text.toString()
+            strFilePath = strFilePath + FILENAME
+            var document: InputStream? = null
+            val factory = DocumentBuilderFactory.newInstance()
+            factory.isNamespaceAware = true
+            document = try {
+                val db = factory.newDocumentBuilder()
+                val inputSource = InputSource(FileReader(strFilePath))
+                FileInputStream(strFilePath) // db.parse(inputSource);
+            } catch (e: ParserConfigurationException) {
+                Log.e("Error: ", e.message!!)
+                return null
+            } /*catch (SAXException e) {
+                Log.e("Error: ", e.getMessage());
+                return null;
+            }*/ catch (e: IOException) {
+                Log.e("Error: ", e.message!!)
+                return null
+            }
+            return document
+        } else {
+            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE),
+                    REQUEST_CODE_PERMISSION_READ_CONTACTS)
+        }
+        return null
+    }
+
+    private fun initializeData() {
+        // переменные для query
+        val columns = arrayOf("_id", "Nominal", "State", "Img", "Year", "Theme", "Description")
+
+        //Наш ключевой хелпер
+        val dbOpenHelper = DBOpenHelper(this, DB_NAME)
+        myDataBase = dbOpenHelper.openDataBase()
+        //Все, база открыта!
+
+//        Cursor cursor = myDataBase.query("coins", columns, selection, selectionArgs, null, null, null);
+        val cursor = myDataBase!!.query("coins", columns, null, null, null, null, null)
+        val num = cursor.count
+        //myArray = arrayOfNulls(num)
+        var i = 0
+        while (cursor.moveToNext()) {
+            val _id = cursor.getInt(0)
+            val nominal = cursor.getString(1)
+            val state = cursor.getString(2)
+            val img = cursor.getString(3)
+            val year = cursor.getString(4)
+            val theme = cursor.getString(5)
+            val description = cursor.getString(6)
+
+            //myArray[i] = nominal + " " + state + " " + year;
+            val coin = Coin(_id.toString(), nominal, state, year, theme, description)
+            myArray[i] = coin
+            i = ++i
+        }
+    }
+
+    @Throws(IOException::class)
+    fun copyFile(sourceFile: File?, destFile: File) {
+        if (!destFile.exists()) {
+            destFile.createNewFile()
+        }
+        var source: FileChannel? = null
+        var destination: FileChannel? = null
+        try {
+            source = FileInputStream(sourceFile).channel
+            destination = FileOutputStream(destFile).channel
+            destination.transferFrom(source, 0, source.size())
+        } finally {
+            source?.close()
+            destination?.close()
+        }
+    }
+
+    companion object {
+        //private static String DB_PATH = "/data/data/com.person.v_plaunov.mylistview/databases/";
+        //private static String DB_PATH = "/storage/self/primary/My Documents/";
+        private const val DB_NAME = "myDB"
+        private const val REQUEST_CODE_PERMISSION_READ_CONTACTS = 1
+        private const val REQUEST_CODE_WRITE_EXTERNAL_STORAGE_PERMISSION = 1
+    }
+}
\ No newline at end of file
